name: Build Executable and Push to S3

on:
  push:
    branches:
      - main
      - release-v*.*.*
  pull_request:
    branches:
      - main
      - release-v*.*.*

permissions:
  id-token: write
  contents: read  
  pull-requests: read
  issues: write

jobs:
  # Checking Branch
  check_branch:
    name: Check Branch
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check_branch.outputs.is_release }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check if the branch is a release branch
        id: check_branch
        run: |
          branch_name="${{ github.ref }}"
          if [[ $branch_name =~ ^refs/heads/release-(.+)$ ]]; then
            echo "::set-output name=is_release::true"
          else
            echo "::set-output name=is_release::false"
          fi
      - name: Display is_release
        run: |
          is_release="${{ steps.check_branch.outputs.is_release }}"
          echo "It is a release branch: $is_release"


  # Extracting Version
  extract_version:
    name : extract_version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    outputs:
      version: ${{ steps.extract_version.outputs.version }}   
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Extract Version
        id: extract_version
        run: |
          branch_name="${{ github.ref }}"
          if [[ $branch_name =~ ^refs/heads/release-(.+)$ ]]; then
            echo "::set-output name=version::${BASH_REMATCH[1]}"
          else
            echo "Invalid branch name format"
            exit 1
          fi
      - name: Display Version
        run: |
          version="${{ steps.extract_version.outputs.version }}"
          echo "Extracted Version: $version"

  # Make Build
  MakeBuild:
    name: Make Build
    needs:
      - check_branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Java and Go
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          checkout-fetch-depth: 0
          java-version: 21
          java-distribution: temurin
          maven-version: 3.9.9
      - name: Execute a Makefile target
        run: make package-all
      - name: Upload dist folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-folder
          path: dist/

  # Deploy to Dev (JAR and Lambda)
  PushBuildDev:
    name: Push JAR to Dev
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push'
    environment: 'SaaSDEV'
    needs:
      - MakeBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: dist/
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Upload dist folder to S3 bucket
        run: |
          cd dist || exit 1
          if [ -z "$(ls -A)" ]; then
            echo "Error: Directory is empty"
            exit 1
          fi
          if ! aws s3 cp --recursive . s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/; then
            echo "Error: Failed to upload to S3"
            exit 1
          fi

  # Deploy Lambda Layer to QA
  PushBuildQA:
    name: Push JAR to QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v')
    environment: 'SaaSQA'
    needs:
      - MakeBuild
      - extract_version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Manual approval
        uses: trstringer/manual-approval@v1
        timeout-minutes: 3
        with:
          secret: ${{ secrets.PALADINCLOUD_SECERT }}
          approvers: kevin-paladin,arunpaladin
          minimum-approvals: 1
          issue-title: "API JARs to QA"
          issue-body: "Please approve or deny the deployment for QA"
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: dist/
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Upload dist folder to S3 bucket
        run: |
         cd dist || exit 1
          if [ -z "$(ls -A)" ]; then
            echo "Error: Directory is empty"
            exit 1
          fi
          if ! aws s3 cp --recursive . s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/; then
            echo "Error: Failed to upload to S3"
            exit 1
          fi


  # Trigger Workflow in Repository installer
  trigger_repo_installer_workflow:
   name: Trigger Workflow in Installer Repo
   runs-on: ubuntu-latest
   environment: 'SaaSDEV'
   needs:
     - PushBuildDev
   if: success()  # Only triggers if previous jobs were successful
   steps:
    - name: Trigger Deploy Workflow in Installer Repo
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PALADINCLOUD_SECERT }}  # Ensure this token has access to Repo B
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: 'PaladinCloud',               // GitHub repo owner
            repo: 'installer',                   // Repo name
            workflow_id: 'deploy.yaml',        // Workflow filename
            ref: 'main',               // Branch to trigger the workflow on
            inputs: {
              environment: 'dev',                // Adjust if dynamic
              aws_region: 'us-east-1',           // Adjust if dynamic
              release_version: 'vlatest'        // Adjust if dynamic
            }
          });
