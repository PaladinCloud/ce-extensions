AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template for asset shipper and delta engine.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
    Description: The environment to deploy the function to

  Subnet1:
    Type: String
    Description: The first subnet ID for VPC configuration.

  Subnet2:
    Type: String
    Description: The second subnet ID for VPC configuration.

  VpcId:
    Type: String
    Description: VPC ID for Lambda function (e.g., vpc-012335987c4c5ef8e).

  CidrIp:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR IP range allowed for ingress traffic.

  S3BUCKETNAME:
    Type: String
    Description: The name of the S3 bucket where the Lambda function code is stored.

  RELEASEVERSION:
    Type: String
    Description: The release version of the Lambda function code.

  TARGETACCOUNT:
    Type: String
    Description: The target account ID for cross-account role assumption.

Resources:
  # Create IAM Role
  DeltaEngineLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-deltaengine-lambdaexecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/svc-${Environment}-asset-shipper:*"


  svcassetshipper:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "svc-${Environment}-asset-shipper"
      CodeUri:
        Bucket: !Ref S3BUCKETNAME
        Key: !Sub ${RELEASEVERSION}/${Environment}/svc-asset-delta-engine/svc-asset-delta-engine.jar
      MemorySize: 512
      Timeout: 900
      Handler: com.paladincloud.assetsender.AssetDoneHandler
      Runtime: java21
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '--enable-preview'
          SUBSYSTEM_NAME: ASSET_SHIPPER
          TENANT_CONFIG_OUTPUT_TABLE: tenant-output
          TENANT_TABLE_PARTITION_KEY: tenant_id
          SECRET_NAME_PREFIX: paladincloud/secret/
          TENANT_CONFIG_TABLE: tenant-config
          ASSUME_ROLE_ARN: !Sub arn:aws:iam::${TARGETACCOUNT}:role/PaladinCloudIntegrationRole
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Role: !GetAtt DeltaEngineLambdaExecutionRole.Arn # Attach the role to the Lambda function
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        Ipv6AllowedForDualStack: false
      Events:
        SQS1:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSAssetMappingDone.Arn
            BatchSize: 10
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/svc-${Environment}-asset-shipper"
      RetentionInDays: 14

  SQSAssetShippingDone:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "svc-${Environment}-asset-shipping-done.fifo"  # Use !Sub for environment substitution
      FifoQueue: true
      ContentBasedDeduplication: true      
      SqsManagedSseEnabled: true
      VisibilityTimeout: 900

  SQSAssetMappingDone:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "svc-${Environment}-asset-mapping-done.fifo"  # Use !Sub for environment substitution
      FifoQueue: true
      SqsManagedSseEnabled: true
      ContentBasedDeduplication: true
      VisibilityTimeout: 900

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda VPC access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrIp
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CidrIp
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref CidrIp

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function.
    Value: !GetAtt svcassetshipper.Arn
    Export:
      Name: LambdaFunctionArn

  AssetShipperSQSQueueURL:
    Description: The URL of the svc-asset-shipping-done.fifo SQS queue.
    Value: !Ref SQSAssetShippingDone
    Export:
      Name: AssetShipperSQSQueueURL

  AssetMappingSQSQueueURL:
    Description: The URL of the svc-asset-mapping-done.fifo SQS queue.
    Value: !Ref SQSAssetMappingDone
    Export:
      Name: AssetMappingSQSQueueURL

  SecurityGroupId:
    Description: The Security Group ID for the Lambda function.
    Value: !Ref SecurityGroup
    Export:
      Name: LambdaSecurityGroupId
