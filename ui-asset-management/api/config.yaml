---
- serviceName: svc-asset-details
  apiConfig:
    method: POST
    path: "/api/v2/assets"
    requireAuth: true
    requireOptionsMethod: true
  serviceConfig:
    environmentalVariables:
      ASSUME_ROLE_ARN: {ASSUME_ROLE_ARN}
      ENABLE_EXTENSION: {ENABLE_EXTENSION}
      REGION: {REGION}
      SECRET_NAME_PREFIX: {SECRET_NAME_PREFIX}
      TENANT_CONFIG_TABLE: {TENANT_CONFIG_TABLE}
      TENANT_CONFIG_TABLE_PARTITION_KEY: {TENANT_CONFIG_TABLE_PARTITION_KEY}
    lambdaConfig:
      handler: lambda_function.lambda_handler
      runtime: python
      runtimeVersion: latest
      timeout: 10
      isArm64: true
      permissions:
        requiresAssumeRole: true
        requireDynamoDB: true
        requireSecretsManager: true
        requireS3: false
      layers:
        - name: svc-asset-details-layer

- serviceName: svc-asset-details-violations
  apiConfig:
    method: POST
    path: "/api/v2/targets/{targetType}/assets/violations"
    requireAuth: true
    requireOptionsMethod: true
  serviceConfig:
    environmentalVariables:
      ASSUME_ROLE_ARN: {ASSUME_ROLE_ARN}
      ENABLE_EXTENSION: {ENABLE_EXTENSION}
      REGION: {REGION}
      SECRET_NAME_PREFIX: {SECRET_NAME_PREFIX}
      TENANT_CONFIG_TABLE: {TENANT_CONFIG_TABLE}
      TENANT_CONFIG_TABLE_PARTITION_KEY: {TENANT_CONFIG_TABLE_PARTITION_KEY}
    lambdaConfig:
      handler: lambda_function.lambda_handler
      runtime: python
      runtimeVersion: latest
      timeout: 10
      isArm64: true
      permissions:
        requiresAssumeRole: true
        requireDynamoDB: true
        requireSecretsManager: true
        requireS3: false
      layers:
        - name: svc-asset-details-violations-layer